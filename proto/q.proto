syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

package proto;

option (gogoproto.goproto_registration) = true;
option (gogoproto.unmarshaler_all) = false;
option (gogoproto.marshaler_all) = false;
option (gogoproto.sizer_all) = false;
option (gogoproto.equal_all) = false;

service Q {
    rpc ListQueues(ListQueuesRequest) returns (ListQueuesResponse) {
        option (google.api.http) = {
            get: "/v1/queues"
        };
    }

    rpc NewQueue(NewQueueRequest) returns (NewQueueResponse) {
        option (google.api.http) = {
            post: "/v1/queues"
            body: "*"
        };
    }

    rpc GetQueue(GetQueueRequest) returns (GetQueueResponse) {
        option (google.api.http) = {
            get: "/v1/queues/{queue_id}"
        };
    }

    rpc DeleteQueue(DeleteQueueRequest) returns (DeleteQueueResponse) {
        option (google.api.http) = {
            delete: "/v1/queues/{queue_id}"
        };
    }

    rpc AddQueueTag(AddQueueTagRequest) returns (AddQueueTagResponse) {
        option (google.api.http) = {
            post: "/v1/queues/{queue_id}/tag"
            body: "tag"
        };
    }

    rpc DeleteQueueTag(DeleteQueueTagRequest) returns (DeleteQueueTagResponse) {
        option (google.api.http) = {
            delete: "/v1/queues/{queue_id}/tag"
            body: "tag"
        };
    }

    rpc Add(AddRequest) returns (AddResponse) {
        option (google.api.http) = {
            post: "/v1/queues/{queue_id}"
            body: "message"
        };
    }

    rpc Pop(PopRequest) returns (PopResponse) {
        option (google.api.http) = {
            get: "/v1/queues/{queue_id}/pop"
        };
    }

    rpc Peek(PeekRequest) returns (PeekResponse) {
        option (google.api.http) = {
            get: "/v1/queues/{queue_id}/peek"
        };
    }
}

message NewQueueRequest {
    Queue.Store store = 1;
    int64 limit = 2;
    repeated Tag tags = 3;
}

message NewQueueResponse {
    Queue queue = 1;
}

message GetQueueRequest {
    string queue_id = 1;
}

message GetQueueResponse {
    Queue queue = 1;
}

message ListQueuesRequest {}

message ListQueuesResponse {
    repeated Queue queues = 1;
}

message DeleteQueueRequest {
    string queue_id = 1;
}

message DeleteQueueResponse {}

message AddQueueTagRequest {
    string queue_id = 1;
    Tag tag = 2;
}

message AddQueueTagResponse {}

message DeleteQueueTagRequest {
    string queue_id = 1;
    Tag tag = 2;
}

message DeleteQueueTagResponse {}

message AddRequest {
    string queue_id = 1;
    NewMessage message = 2;
}

message AddResponse {
    Message message = 1;
}

message PopRequest {
    string queue_id = 1;
}

message PopResponse {
    Message message = 1;
}

message PeekRequest {
    string queue_id = 1;
}

message PeekResponse {
    Message message = 1;
}

message Tag {
    string key = 1;
    string value = 2;
}

message Metadata {
    string id = 1;
    google.protobuf.Timestamp created = 2;
    repeated Tag tags = 3;
}

// A NewMessage is the user-writable subset of a Message. We could use Message
// for new messages and just ignore any ID or create times the caller sent, but
// doing so would cause the grpc-gateway swagger spec generator to generate a
// misleading input.
message NewMessage {
    repeated Tag tags = 1;
    bytes payload = 2;
}

message Message {
    Metadata meta = 1;
    bytes payload = 2;
}

message Queue {
    enum Store {
        UNKNOWN = 0;
        MEMORY = 1;
    }
    Metadata meta = 1;
    Store store = 2;
}
// Code generated by protoc-gen-gogo.
// source: q.proto
// DO NOT EDIT!

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		q.proto

	It has these top-level messages:
		NewQueueRequest
		NewQueueResponse
		GetQueueRequest
		GetQueueResponse
		ListQueuesRequest
		ListQueuesResponse
		DeleteQueueRequest
		DeleteQueueResponse
		AddQueueTagRequest
		AddQueueTagResponse
		DeleteQueueTagRequest
		DeleteQueueTagResponse
		AddRequest
		AddResponse
		PopRequest
		PopResponse
		PeekRequest
		PeekResponse
		Tag
		Metadata
		Message
		Queue
*/
package proto

import proto1 "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import time "time"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Queue_Store int32

const (
	UNKNOWN Queue_Store = 0
	MEMORY  Queue_Store = 1
)

var Queue_Store_name = map[int32]string{
	0: "UNKNOWN",
	1: "MEMORY",
}
var Queue_Store_value = map[string]int32{
	"UNKNOWN": 0,
	"MEMORY":  1,
}

func (Queue_Store) EnumDescriptor() ([]byte, []int) { return fileDescriptorQ, []int{21, 0} }

type NewQueueRequest struct {
	Store Queue_Store `protobuf:"varint,1,opt,name=store,proto3,enum=proto.Queue_Store" json:"store,omitempty"`
	Limit int64       `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Tags  []*Tag      `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
}

func (m *NewQueueRequest) Reset()                    { *m = NewQueueRequest{} }
func (*NewQueueRequest) ProtoMessage()               {}
func (*NewQueueRequest) Descriptor() ([]byte, []int) { return fileDescriptorQ, []int{0} }

func (m *NewQueueRequest) GetStore() Queue_Store {
	if m != nil {
		return m.Store
	}
	return UNKNOWN
}

func (m *NewQueueRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *NewQueueRequest) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type NewQueueResponse struct {
	Queue *Queue `protobuf:"bytes,1,opt,name=queue" json:"queue,omitempty"`
}

func (m *NewQueueResponse) Reset()                    { *m = NewQueueResponse{} }
func (*NewQueueResponse) ProtoMessage()               {}
func (*NewQueueResponse) Descriptor() ([]byte, []int) { return fileDescriptorQ, []int{1} }

func (m *NewQueueResponse) GetQueue() *Queue {
	if m != nil {
		return m.Queue
	}
	return nil
}

type GetQueueRequest struct {
	QueueId string `protobuf:"bytes,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
}

func (m *GetQueueRequest) Reset()                    { *m = GetQueueRequest{} }
func (*GetQueueRequest) ProtoMessage()               {}
func (*GetQueueRequest) Descriptor() ([]byte, []int) { return fileDescriptorQ, []int{2} }

func (m *GetQueueRequest) GetQueueId() string {
	if m != nil {
		return m.QueueId
	}
	return ""
}

type GetQueueResponse struct {
	Queue *Queue `protobuf:"bytes,1,opt,name=queue" json:"queue,omitempty"`
}

func (m *GetQueueResponse) Reset()                    { *m = GetQueueResponse{} }
func (*GetQueueResponse) ProtoMessage()               {}
func (*GetQueueResponse) Descriptor() ([]byte, []int) { return fileDescriptorQ, []int{3} }

func (m *GetQueueResponse) GetQueue() *Queue {
	if m != nil {
		return m.Queue
	}
	return nil
}

type ListQueuesRequest struct {
}

func (m *ListQueuesRequest) Reset()                    { *m = ListQueuesRequest{} }
func (*ListQueuesRequest) ProtoMessage()               {}
func (*ListQueuesRequest) Descriptor() ([]byte, []int) { return fileDescriptorQ, []int{4} }

type ListQueuesResponse struct {
	Queues []*Queue `protobuf:"bytes,1,rep,name=queues" json:"queues,omitempty"`
}

func (m *ListQueuesResponse) Reset()                    { *m = ListQueuesResponse{} }
func (*ListQueuesResponse) ProtoMessage()               {}
func (*ListQueuesResponse) Descriptor() ([]byte, []int) { return fileDescriptorQ, []int{5} }

func (m *ListQueuesResponse) GetQueues() []*Queue {
	if m != nil {
		return m.Queues
	}
	return nil
}

type DeleteQueueRequest struct {
	QueueId string `protobuf:"bytes,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
}

func (m *DeleteQueueRequest) Reset()                    { *m = DeleteQueueRequest{} }
func (*DeleteQueueRequest) ProtoMessage()               {}
func (*DeleteQueueRequest) Descriptor() ([]byte, []int) { return fileDescriptorQ, []int{6} }

func (m *DeleteQueueRequest) GetQueueId() string {
	if m != nil {
		return m.QueueId
	}
	return ""
}

type DeleteQueueResponse struct {
}

func (m *DeleteQueueResponse) Reset()                    { *m = DeleteQueueResponse{} }
func (*DeleteQueueResponse) ProtoMessage()               {}
func (*DeleteQueueResponse) Descriptor() ([]byte, []int) { return fileDescriptorQ, []int{7} }

type AddQueueTagRequest struct {
	QueueId string `protobuf:"bytes,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	Tag     *Tag   `protobuf:"bytes,2,opt,name=tag" json:"tag,omitempty"`
}

func (m *AddQueueTagRequest) Reset()                    { *m = AddQueueTagRequest{} }
func (*AddQueueTagRequest) ProtoMessage()               {}
func (*AddQueueTagRequest) Descriptor() ([]byte, []int) { return fileDescriptorQ, []int{8} }

func (m *AddQueueTagRequest) GetQueueId() string {
	if m != nil {
		return m.QueueId
	}
	return ""
}

func (m *AddQueueTagRequest) GetTag() *Tag {
	if m != nil {
		return m.Tag
	}
	return nil
}

type AddQueueTagResponse struct {
}

func (m *AddQueueTagResponse) Reset()                    { *m = AddQueueTagResponse{} }
func (*AddQueueTagResponse) ProtoMessage()               {}
func (*AddQueueTagResponse) Descriptor() ([]byte, []int) { return fileDescriptorQ, []int{9} }

type DeleteQueueTagRequest struct {
	QueueId string `protobuf:"bytes,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	Tag     *Tag   `protobuf:"bytes,2,opt,name=tag" json:"tag,omitempty"`
}

func (m *DeleteQueueTagRequest) Reset()                    { *m = DeleteQueueTagRequest{} }
func (*DeleteQueueTagRequest) ProtoMessage()               {}
func (*DeleteQueueTagRequest) Descriptor() ([]byte, []int) { return fileDescriptorQ, []int{10} }

func (m *DeleteQueueTagRequest) GetQueueId() string {
	if m != nil {
		return m.QueueId
	}
	return ""
}

func (m *DeleteQueueTagRequest) GetTag() *Tag {
	if m != nil {
		return m.Tag
	}
	return nil
}

type DeleteQueueTagResponse struct {
}

func (m *DeleteQueueTagResponse) Reset()                    { *m = DeleteQueueTagResponse{} }
func (*DeleteQueueTagResponse) ProtoMessage()               {}
func (*DeleteQueueTagResponse) Descriptor() ([]byte, []int) { return fileDescriptorQ, []int{11} }

type AddRequest struct {
	QueueId string   `protobuf:"bytes,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	Message *Message `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *AddRequest) Reset()                    { *m = AddRequest{} }
func (*AddRequest) ProtoMessage()               {}
func (*AddRequest) Descriptor() ([]byte, []int) { return fileDescriptorQ, []int{12} }

func (m *AddRequest) GetQueueId() string {
	if m != nil {
		return m.QueueId
	}
	return ""
}

func (m *AddRequest) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type AddResponse struct {
}

func (m *AddResponse) Reset()                    { *m = AddResponse{} }
func (*AddResponse) ProtoMessage()               {}
func (*AddResponse) Descriptor() ([]byte, []int) { return fileDescriptorQ, []int{13} }

type PopRequest struct {
	QueueId string `protobuf:"bytes,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
}

func (m *PopRequest) Reset()                    { *m = PopRequest{} }
func (*PopRequest) ProtoMessage()               {}
func (*PopRequest) Descriptor() ([]byte, []int) { return fileDescriptorQ, []int{14} }

func (m *PopRequest) GetQueueId() string {
	if m != nil {
		return m.QueueId
	}
	return ""
}

type PopResponse struct {
	Message *Message `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *PopResponse) Reset()                    { *m = PopResponse{} }
func (*PopResponse) ProtoMessage()               {}
func (*PopResponse) Descriptor() ([]byte, []int) { return fileDescriptorQ, []int{15} }

func (m *PopResponse) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type PeekRequest struct {
	QueueId string `protobuf:"bytes,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
}

func (m *PeekRequest) Reset()                    { *m = PeekRequest{} }
func (*PeekRequest) ProtoMessage()               {}
func (*PeekRequest) Descriptor() ([]byte, []int) { return fileDescriptorQ, []int{16} }

func (m *PeekRequest) GetQueueId() string {
	if m != nil {
		return m.QueueId
	}
	return ""
}

type PeekResponse struct {
	Message *Message `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *PeekResponse) Reset()                    { *m = PeekResponse{} }
func (*PeekResponse) ProtoMessage()               {}
func (*PeekResponse) Descriptor() ([]byte, []int) { return fileDescriptorQ, []int{17} }

func (m *PeekResponse) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type Tag struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptorQ, []int{18} }

func (m *Tag) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Tag) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Metadata struct {
	Id      string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Created *time.Time `protobuf:"bytes,2,opt,name=created,stdtime" json:"created,omitempty"`
	Tags    []*Tag     `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptorQ, []int{19} }

func (m *Metadata) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Metadata) GetCreated() *time.Time {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Metadata) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Message struct {
	Meta    *Metadata `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Payload []byte    `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorQ, []int{20} }

func (m *Message) GetMeta() *Metadata {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Queue struct {
	Meta  *Metadata   `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Store Queue_Store `protobuf:"varint,2,opt,name=store,proto3,enum=proto.Queue_Store" json:"store,omitempty"`
}

func (m *Queue) Reset()                    { *m = Queue{} }
func (*Queue) ProtoMessage()               {}
func (*Queue) Descriptor() ([]byte, []int) { return fileDescriptorQ, []int{21} }

func (m *Queue) GetMeta() *Metadata {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Queue) GetStore() Queue_Store {
	if m != nil {
		return m.Store
	}
	return UNKNOWN
}

func init() {
	proto1.RegisterType((*NewQueueRequest)(nil), "proto.NewQueueRequest")
	golang_proto.RegisterType((*NewQueueRequest)(nil), "proto.NewQueueRequest")
	proto1.RegisterType((*NewQueueResponse)(nil), "proto.NewQueueResponse")
	golang_proto.RegisterType((*NewQueueResponse)(nil), "proto.NewQueueResponse")
	proto1.RegisterType((*GetQueueRequest)(nil), "proto.GetQueueRequest")
	golang_proto.RegisterType((*GetQueueRequest)(nil), "proto.GetQueueRequest")
	proto1.RegisterType((*GetQueueResponse)(nil), "proto.GetQueueResponse")
	golang_proto.RegisterType((*GetQueueResponse)(nil), "proto.GetQueueResponse")
	proto1.RegisterType((*ListQueuesRequest)(nil), "proto.ListQueuesRequest")
	golang_proto.RegisterType((*ListQueuesRequest)(nil), "proto.ListQueuesRequest")
	proto1.RegisterType((*ListQueuesResponse)(nil), "proto.ListQueuesResponse")
	golang_proto.RegisterType((*ListQueuesResponse)(nil), "proto.ListQueuesResponse")
	proto1.RegisterType((*DeleteQueueRequest)(nil), "proto.DeleteQueueRequest")
	golang_proto.RegisterType((*DeleteQueueRequest)(nil), "proto.DeleteQueueRequest")
	proto1.RegisterType((*DeleteQueueResponse)(nil), "proto.DeleteQueueResponse")
	golang_proto.RegisterType((*DeleteQueueResponse)(nil), "proto.DeleteQueueResponse")
	proto1.RegisterType((*AddQueueTagRequest)(nil), "proto.AddQueueTagRequest")
	golang_proto.RegisterType((*AddQueueTagRequest)(nil), "proto.AddQueueTagRequest")
	proto1.RegisterType((*AddQueueTagResponse)(nil), "proto.AddQueueTagResponse")
	golang_proto.RegisterType((*AddQueueTagResponse)(nil), "proto.AddQueueTagResponse")
	proto1.RegisterType((*DeleteQueueTagRequest)(nil), "proto.DeleteQueueTagRequest")
	golang_proto.RegisterType((*DeleteQueueTagRequest)(nil), "proto.DeleteQueueTagRequest")
	proto1.RegisterType((*DeleteQueueTagResponse)(nil), "proto.DeleteQueueTagResponse")
	golang_proto.RegisterType((*DeleteQueueTagResponse)(nil), "proto.DeleteQueueTagResponse")
	proto1.RegisterType((*AddRequest)(nil), "proto.AddRequest")
	golang_proto.RegisterType((*AddRequest)(nil), "proto.AddRequest")
	proto1.RegisterType((*AddResponse)(nil), "proto.AddResponse")
	golang_proto.RegisterType((*AddResponse)(nil), "proto.AddResponse")
	proto1.RegisterType((*PopRequest)(nil), "proto.PopRequest")
	golang_proto.RegisterType((*PopRequest)(nil), "proto.PopRequest")
	proto1.RegisterType((*PopResponse)(nil), "proto.PopResponse")
	golang_proto.RegisterType((*PopResponse)(nil), "proto.PopResponse")
	proto1.RegisterType((*PeekRequest)(nil), "proto.PeekRequest")
	golang_proto.RegisterType((*PeekRequest)(nil), "proto.PeekRequest")
	proto1.RegisterType((*PeekResponse)(nil), "proto.PeekResponse")
	golang_proto.RegisterType((*PeekResponse)(nil), "proto.PeekResponse")
	proto1.RegisterType((*Tag)(nil), "proto.Tag")
	golang_proto.RegisterType((*Tag)(nil), "proto.Tag")
	proto1.RegisterType((*Metadata)(nil), "proto.Metadata")
	golang_proto.RegisterType((*Metadata)(nil), "proto.Metadata")
	proto1.RegisterType((*Message)(nil), "proto.Message")
	golang_proto.RegisterType((*Message)(nil), "proto.Message")
	proto1.RegisterType((*Queue)(nil), "proto.Queue")
	golang_proto.RegisterType((*Queue)(nil), "proto.Queue")
	proto1.RegisterEnum("proto.Queue_Store", Queue_Store_name, Queue_Store_value)
	golang_proto.RegisterEnum("proto.Queue_Store", Queue_Store_name, Queue_Store_value)
}
func (x Queue_Store) String() string {
	s, ok := Queue_Store_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *NewQueueRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NewQueueRequest)
	if !ok {
		that2, ok := that.(NewQueueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	return true
}
func (this *NewQueueResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NewQueueResponse)
	if !ok {
		that2, ok := that.(NewQueueResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Queue.Equal(that1.Queue) {
		return false
	}
	return true
}
func (this *GetQueueRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetQueueRequest)
	if !ok {
		that2, ok := that.(GetQueueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.QueueId != that1.QueueId {
		return false
	}
	return true
}
func (this *GetQueueResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetQueueResponse)
	if !ok {
		that2, ok := that.(GetQueueResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Queue.Equal(that1.Queue) {
		return false
	}
	return true
}
func (this *ListQueuesRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListQueuesRequest)
	if !ok {
		that2, ok := that.(ListQueuesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ListQueuesResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListQueuesResponse)
	if !ok {
		that2, ok := that.(ListQueuesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Queues) != len(that1.Queues) {
		return false
	}
	for i := range this.Queues {
		if !this.Queues[i].Equal(that1.Queues[i]) {
			return false
		}
	}
	return true
}
func (this *DeleteQueueRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteQueueRequest)
	if !ok {
		that2, ok := that.(DeleteQueueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.QueueId != that1.QueueId {
		return false
	}
	return true
}
func (this *DeleteQueueResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteQueueResponse)
	if !ok {
		that2, ok := that.(DeleteQueueResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *AddQueueTagRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AddQueueTagRequest)
	if !ok {
		that2, ok := that.(AddQueueTagRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.QueueId != that1.QueueId {
		return false
	}
	if !this.Tag.Equal(that1.Tag) {
		return false
	}
	return true
}
func (this *AddQueueTagResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AddQueueTagResponse)
	if !ok {
		that2, ok := that.(AddQueueTagResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeleteQueueTagRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteQueueTagRequest)
	if !ok {
		that2, ok := that.(DeleteQueueTagRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.QueueId != that1.QueueId {
		return false
	}
	if !this.Tag.Equal(that1.Tag) {
		return false
	}
	return true
}
func (this *DeleteQueueTagResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeleteQueueTagResponse)
	if !ok {
		that2, ok := that.(DeleteQueueTagResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *AddRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AddRequest)
	if !ok {
		that2, ok := that.(AddRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.QueueId != that1.QueueId {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *AddResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AddResponse)
	if !ok {
		that2, ok := that.(AddResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *PopRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PopRequest)
	if !ok {
		that2, ok := that.(PopRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.QueueId != that1.QueueId {
		return false
	}
	return true
}
func (this *PopResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PopResponse)
	if !ok {
		that2, ok := that.(PopResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *PeekRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PeekRequest)
	if !ok {
		that2, ok := that.(PeekRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.QueueId != that1.QueueId {
		return false
	}
	return true
}
func (this *PeekResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PeekResponse)
	if !ok {
		that2, ok := that.(PeekResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *Tag) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Tag)
	if !ok {
		that2, ok := that.(Tag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Metadata) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Metadata)
	if !ok {
		that2, ok := that.(Metadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if that1.Created == nil {
		if this.Created != nil {
			return false
		}
	} else if !this.Created.Equal(*that1.Created) {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	return true
}
func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Meta.Equal(that1.Meta) {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	return true
}
func (this *Queue) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Queue)
	if !ok {
		that2, ok := that.(Queue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Meta.Equal(that1.Meta) {
		return false
	}
	if this.Store != that1.Store {
		return false
	}
	return true
}
func (this *NewQueueRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.NewQueueRequest{")
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	if this.Tags != nil {
		s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewQueueResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.NewQueueResponse{")
	if this.Queue != nil {
		s = append(s, "Queue: "+fmt.Sprintf("%#v", this.Queue)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetQueueRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.GetQueueRequest{")
	s = append(s, "QueueId: "+fmt.Sprintf("%#v", this.QueueId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetQueueResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.GetQueueResponse{")
	if this.Queue != nil {
		s = append(s, "Queue: "+fmt.Sprintf("%#v", this.Queue)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListQueuesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.ListQueuesRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListQueuesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.ListQueuesResponse{")
	if this.Queues != nil {
		s = append(s, "Queues: "+fmt.Sprintf("%#v", this.Queues)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteQueueRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.DeleteQueueRequest{")
	s = append(s, "QueueId: "+fmt.Sprintf("%#v", this.QueueId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteQueueResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.DeleteQueueResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddQueueTagRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.AddQueueTagRequest{")
	s = append(s, "QueueId: "+fmt.Sprintf("%#v", this.QueueId)+",\n")
	if this.Tag != nil {
		s = append(s, "Tag: "+fmt.Sprintf("%#v", this.Tag)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddQueueTagResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.AddQueueTagResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteQueueTagRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.DeleteQueueTagRequest{")
	s = append(s, "QueueId: "+fmt.Sprintf("%#v", this.QueueId)+",\n")
	if this.Tag != nil {
		s = append(s, "Tag: "+fmt.Sprintf("%#v", this.Tag)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteQueueTagResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.DeleteQueueTagResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.AddRequest{")
	s = append(s, "QueueId: "+fmt.Sprintf("%#v", this.QueueId)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&proto.AddResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PopRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.PopRequest{")
	s = append(s, "QueueId: "+fmt.Sprintf("%#v", this.QueueId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PopResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.PopResponse{")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeekRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.PeekRequest{")
	s = append(s, "QueueId: "+fmt.Sprintf("%#v", this.QueueId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeekResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.PeekResponse{")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Tag) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.Tag{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Metadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&proto.Metadata{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Created: "+fmt.Sprintf("%#v", this.Created)+",\n")
	if this.Tags != nil {
		s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.Message{")
	if this.Meta != nil {
		s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	}
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Queue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.Queue{")
	if this.Meta != nil {
		s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	}
	s = append(s, "Store: "+fmt.Sprintf("%#v", this.Store)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringQ(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Q service

type QClient interface {
	ListQueues(ctx context.Context, in *ListQueuesRequest, opts ...grpc.CallOption) (*ListQueuesResponse, error)
	NewQueue(ctx context.Context, in *NewQueueRequest, opts ...grpc.CallOption) (*NewQueueResponse, error)
	GetQueue(ctx context.Context, in *GetQueueRequest, opts ...grpc.CallOption) (*GetQueueResponse, error)
	DeleteQueue(ctx context.Context, in *DeleteQueueRequest, opts ...grpc.CallOption) (*DeleteQueueResponse, error)
	AddQueueTag(ctx context.Context, in *AddQueueTagRequest, opts ...grpc.CallOption) (*AddQueueTagResponse, error)
	DeleteQueueTag(ctx context.Context, in *DeleteQueueTagRequest, opts ...grpc.CallOption) (*DeleteQueueTagResponse, error)
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	Pop(ctx context.Context, in *PopRequest, opts ...grpc.CallOption) (*PopResponse, error)
	Peek(ctx context.Context, in *PeekRequest, opts ...grpc.CallOption) (*PeekResponse, error)
}

type qClient struct {
	cc *grpc.ClientConn
}

func NewQClient(cc *grpc.ClientConn) QClient {
	return &qClient{cc}
}

func (c *qClient) ListQueues(ctx context.Context, in *ListQueuesRequest, opts ...grpc.CallOption) (*ListQueuesResponse, error) {
	out := new(ListQueuesResponse)
	err := grpc.Invoke(ctx, "/proto.Q/ListQueues", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qClient) NewQueue(ctx context.Context, in *NewQueueRequest, opts ...grpc.CallOption) (*NewQueueResponse, error) {
	out := new(NewQueueResponse)
	err := grpc.Invoke(ctx, "/proto.Q/NewQueue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qClient) GetQueue(ctx context.Context, in *GetQueueRequest, opts ...grpc.CallOption) (*GetQueueResponse, error) {
	out := new(GetQueueResponse)
	err := grpc.Invoke(ctx, "/proto.Q/GetQueue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qClient) DeleteQueue(ctx context.Context, in *DeleteQueueRequest, opts ...grpc.CallOption) (*DeleteQueueResponse, error) {
	out := new(DeleteQueueResponse)
	err := grpc.Invoke(ctx, "/proto.Q/DeleteQueue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qClient) AddQueueTag(ctx context.Context, in *AddQueueTagRequest, opts ...grpc.CallOption) (*AddQueueTagResponse, error) {
	out := new(AddQueueTagResponse)
	err := grpc.Invoke(ctx, "/proto.Q/AddQueueTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qClient) DeleteQueueTag(ctx context.Context, in *DeleteQueueTagRequest, opts ...grpc.CallOption) (*DeleteQueueTagResponse, error) {
	out := new(DeleteQueueTagResponse)
	err := grpc.Invoke(ctx, "/proto.Q/DeleteQueueTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := grpc.Invoke(ctx, "/proto.Q/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qClient) Pop(ctx context.Context, in *PopRequest, opts ...grpc.CallOption) (*PopResponse, error) {
	out := new(PopResponse)
	err := grpc.Invoke(ctx, "/proto.Q/Pop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qClient) Peek(ctx context.Context, in *PeekRequest, opts ...grpc.CallOption) (*PeekResponse, error) {
	out := new(PeekResponse)
	err := grpc.Invoke(ctx, "/proto.Q/Peek", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Q service

type QServer interface {
	ListQueues(context.Context, *ListQueuesRequest) (*ListQueuesResponse, error)
	NewQueue(context.Context, *NewQueueRequest) (*NewQueueResponse, error)
	GetQueue(context.Context, *GetQueueRequest) (*GetQueueResponse, error)
	DeleteQueue(context.Context, *DeleteQueueRequest) (*DeleteQueueResponse, error)
	AddQueueTag(context.Context, *AddQueueTagRequest) (*AddQueueTagResponse, error)
	DeleteQueueTag(context.Context, *DeleteQueueTagRequest) (*DeleteQueueTagResponse, error)
	Add(context.Context, *AddRequest) (*AddResponse, error)
	Pop(context.Context, *PopRequest) (*PopResponse, error)
	Peek(context.Context, *PeekRequest) (*PeekResponse, error)
}

func RegisterQServer(s *grpc.Server, srv QServer) {
	s.RegisterService(&_Q_serviceDesc, srv)
}

func _Q_ListQueues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQueuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QServer).ListQueues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Q/ListQueues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QServer).ListQueues(ctx, req.(*ListQueuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Q_NewQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QServer).NewQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Q/NewQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QServer).NewQueue(ctx, req.(*NewQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Q_GetQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QServer).GetQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Q/GetQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QServer).GetQueue(ctx, req.(*GetQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Q_DeleteQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QServer).DeleteQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Q/DeleteQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QServer).DeleteQueue(ctx, req.(*DeleteQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Q_AddQueueTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddQueueTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QServer).AddQueueTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Q/AddQueueTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QServer).AddQueueTag(ctx, req.(*AddQueueTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Q_DeleteQueueTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueueTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QServer).DeleteQueueTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Q/DeleteQueueTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QServer).DeleteQueueTag(ctx, req.(*DeleteQueueTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Q_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Q/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Q_Pop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QServer).Pop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Q/Pop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QServer).Pop(ctx, req.(*PopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Q_Peek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeekRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QServer).Peek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Q/Peek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QServer).Peek(ctx, req.(*PeekRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Q_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Q",
	HandlerType: (*QServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListQueues",
			Handler:    _Q_ListQueues_Handler,
		},
		{
			MethodName: "NewQueue",
			Handler:    _Q_NewQueue_Handler,
		},
		{
			MethodName: "GetQueue",
			Handler:    _Q_GetQueue_Handler,
		},
		{
			MethodName: "DeleteQueue",
			Handler:    _Q_DeleteQueue_Handler,
		},
		{
			MethodName: "AddQueueTag",
			Handler:    _Q_AddQueueTag_Handler,
		},
		{
			MethodName: "DeleteQueueTag",
			Handler:    _Q_DeleteQueueTag_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Q_Add_Handler,
		},
		{
			MethodName: "Pop",
			Handler:    _Q_Pop_Handler,
		},
		{
			MethodName: "Peek",
			Handler:    _Q_Peek_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "q.proto",
}

func (m *NewQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Store != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintQ(dAtA, i, uint64(m.Store))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintQ(dAtA, i, uint64(m.Limit))
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintQ(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NewQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Queue != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQ(dAtA, i, uint64(m.Queue.Size()))
		n1, err := m.Queue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GetQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.QueueId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQ(dAtA, i, uint64(len(m.QueueId)))
		i += copy(dAtA[i:], m.QueueId)
	}
	return i, nil
}

func (m *GetQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Queue != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQ(dAtA, i, uint64(m.Queue.Size()))
		n2, err := m.Queue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *ListQueuesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListQueuesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ListQueuesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListQueuesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Queues) > 0 {
		for _, msg := range m.Queues {
			dAtA[i] = 0xa
			i++
			i = encodeVarintQ(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DeleteQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.QueueId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQ(dAtA, i, uint64(len(m.QueueId)))
		i += copy(dAtA[i:], m.QueueId)
	}
	return i, nil
}

func (m *DeleteQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AddQueueTagRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddQueueTagRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.QueueId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQ(dAtA, i, uint64(len(m.QueueId)))
		i += copy(dAtA[i:], m.QueueId)
	}
	if m.Tag != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQ(dAtA, i, uint64(m.Tag.Size()))
		n3, err := m.Tag.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *AddQueueTagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddQueueTagResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeleteQueueTagRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteQueueTagRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.QueueId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQ(dAtA, i, uint64(len(m.QueueId)))
		i += copy(dAtA[i:], m.QueueId)
	}
	if m.Tag != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQ(dAtA, i, uint64(m.Tag.Size()))
		n4, err := m.Tag.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *DeleteQueueTagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteQueueTagResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AddRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.QueueId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQ(dAtA, i, uint64(len(m.QueueId)))
		i += copy(dAtA[i:], m.QueueId)
	}
	if m.Message != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQ(dAtA, i, uint64(m.Message.Size()))
		n5, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *AddResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *PopRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PopRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.QueueId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQ(dAtA, i, uint64(len(m.QueueId)))
		i += copy(dAtA[i:], m.QueueId)
	}
	return i, nil
}

func (m *PopResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PopResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQ(dAtA, i, uint64(m.Message.Size()))
		n6, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *PeekRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeekRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.QueueId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQ(dAtA, i, uint64(len(m.QueueId)))
		i += copy(dAtA[i:], m.QueueId)
	}
	return i, nil
}

func (m *PeekResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeekResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQ(dAtA, i, uint64(m.Message.Size()))
		n7, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *Tag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQ(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQ(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQ(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Created != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQ(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.Created)))
		n8, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Created, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintQ(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQ(dAtA, i, uint64(m.Meta.Size()))
		n9, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQ(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *Queue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Queue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQ(dAtA, i, uint64(m.Meta.Size()))
		n10, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Store != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintQ(dAtA, i, uint64(m.Store))
	}
	return i, nil
}

func encodeFixed64Q(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Q(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintQ(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NewQueueRequest) Size() (n int) {
	var l int
	_ = l
	if m.Store != 0 {
		n += 1 + sovQ(uint64(m.Store))
	}
	if m.Limit != 0 {
		n += 1 + sovQ(uint64(m.Limit))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovQ(uint64(l))
		}
	}
	return n
}

func (m *NewQueueResponse) Size() (n int) {
	var l int
	_ = l
	if m.Queue != nil {
		l = m.Queue.Size()
		n += 1 + l + sovQ(uint64(l))
	}
	return n
}

func (m *GetQueueRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.QueueId)
	if l > 0 {
		n += 1 + l + sovQ(uint64(l))
	}
	return n
}

func (m *GetQueueResponse) Size() (n int) {
	var l int
	_ = l
	if m.Queue != nil {
		l = m.Queue.Size()
		n += 1 + l + sovQ(uint64(l))
	}
	return n
}

func (m *ListQueuesRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ListQueuesResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Queues) > 0 {
		for _, e := range m.Queues {
			l = e.Size()
			n += 1 + l + sovQ(uint64(l))
		}
	}
	return n
}

func (m *DeleteQueueRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.QueueId)
	if l > 0 {
		n += 1 + l + sovQ(uint64(l))
	}
	return n
}

func (m *DeleteQueueResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *AddQueueTagRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.QueueId)
	if l > 0 {
		n += 1 + l + sovQ(uint64(l))
	}
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 1 + l + sovQ(uint64(l))
	}
	return n
}

func (m *AddQueueTagResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeleteQueueTagRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.QueueId)
	if l > 0 {
		n += 1 + l + sovQ(uint64(l))
	}
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 1 + l + sovQ(uint64(l))
	}
	return n
}

func (m *DeleteQueueTagResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *AddRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.QueueId)
	if l > 0 {
		n += 1 + l + sovQ(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovQ(uint64(l))
	}
	return n
}

func (m *AddResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *PopRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.QueueId)
	if l > 0 {
		n += 1 + l + sovQ(uint64(l))
	}
	return n
}

func (m *PopResponse) Size() (n int) {
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovQ(uint64(l))
	}
	return n
}

func (m *PeekRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.QueueId)
	if l > 0 {
		n += 1 + l + sovQ(uint64(l))
	}
	return n
}

func (m *PeekResponse) Size() (n int) {
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovQ(uint64(l))
	}
	return n
}

func (m *Tag) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovQ(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQ(uint64(l))
	}
	return n
}

func (m *Metadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQ(uint64(l))
	}
	if m.Created != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Created)
		n += 1 + l + sovQ(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovQ(uint64(l))
		}
	}
	return n
}

func (m *Message) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovQ(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovQ(uint64(l))
	}
	return n
}

func (m *Queue) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovQ(uint64(l))
	}
	if m.Store != 0 {
		n += 1 + sovQ(uint64(m.Store))
	}
	return n
}

func sovQ(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozQ(x uint64) (n int) {
	return sovQ(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NewQueueRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewQueueRequest{`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Tags:` + strings.Replace(fmt.Sprintf("%v", this.Tags), "Tag", "Tag", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewQueueResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewQueueResponse{`,
		`Queue:` + strings.Replace(fmt.Sprintf("%v", this.Queue), "Queue", "Queue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetQueueRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetQueueRequest{`,
		`QueueId:` + fmt.Sprintf("%v", this.QueueId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetQueueResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetQueueResponse{`,
		`Queue:` + strings.Replace(fmt.Sprintf("%v", this.Queue), "Queue", "Queue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListQueuesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListQueuesRequest{`,
		`}`,
	}, "")
	return s
}
func (this *ListQueuesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListQueuesResponse{`,
		`Queues:` + strings.Replace(fmt.Sprintf("%v", this.Queues), "Queue", "Queue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteQueueRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteQueueRequest{`,
		`QueueId:` + fmt.Sprintf("%v", this.QueueId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteQueueResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteQueueResponse{`,
		`}`,
	}, "")
	return s
}
func (this *AddQueueTagRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddQueueTagRequest{`,
		`QueueId:` + fmt.Sprintf("%v", this.QueueId) + `,`,
		`Tag:` + strings.Replace(fmt.Sprintf("%v", this.Tag), "Tag", "Tag", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddQueueTagResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddQueueTagResponse{`,
		`}`,
	}, "")
	return s
}
func (this *DeleteQueueTagRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteQueueTagRequest{`,
		`QueueId:` + fmt.Sprintf("%v", this.QueueId) + `,`,
		`Tag:` + strings.Replace(fmt.Sprintf("%v", this.Tag), "Tag", "Tag", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteQueueTagResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteQueueTagResponse{`,
		`}`,
	}, "")
	return s
}
func (this *AddRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddRequest{`,
		`QueueId:` + fmt.Sprintf("%v", this.QueueId) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "Message", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddResponse{`,
		`}`,
	}, "")
	return s
}
func (this *PopRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PopRequest{`,
		`QueueId:` + fmt.Sprintf("%v", this.QueueId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PopResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PopResponse{`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "Message", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeekRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeekRequest{`,
		`QueueId:` + fmt.Sprintf("%v", this.QueueId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeekResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeekResponse{`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "Message", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tag) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Tag{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Metadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Metadata{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Created:` + strings.Replace(fmt.Sprintf("%v", this.Created), "Timestamp", "google_protobuf1.Timestamp", 1) + `,`,
		`Tags:` + strings.Replace(fmt.Sprintf("%v", this.Tags), "Tag", "Tag", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message{`,
		`Meta:` + strings.Replace(fmt.Sprintf("%v", this.Meta), "Metadata", "Metadata", 1) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Queue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Queue{`,
		`Meta:` + strings.Replace(fmt.Sprintf("%v", this.Meta), "Metadata", "Metadata", 1) + `,`,
		`Store:` + fmt.Sprintf("%v", this.Store) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringQ(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NewQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQ
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= (Queue_Store(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQ(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQ
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQ
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Queue == nil {
				m.Queue = &Queue{}
			}
			if err := m.Queue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQ(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQ
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQ
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQ(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQ
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQ
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Queue == nil {
				m.Queue = &Queue{}
			}
			if err := m.Queue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQ(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQ
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListQueuesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQ
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListQueuesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListQueuesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQ(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQ
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListQueuesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQ
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListQueuesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListQueuesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queues = append(m.Queues, &Queue{})
			if err := m.Queues[len(m.Queues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQ(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQ
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQ
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQ(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQ
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQ
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQ(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQ
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddQueueTagRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQ
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddQueueTagRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddQueueTagRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tag == nil {
				m.Tag = &Tag{}
			}
			if err := m.Tag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQ(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQ
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddQueueTagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQ
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddQueueTagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddQueueTagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQ(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQ
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteQueueTagRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQ
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteQueueTagRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteQueueTagRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tag == nil {
				m.Tag = &Tag{}
			}
			if err := m.Tag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQ(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQ
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteQueueTagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQ
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteQueueTagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteQueueTagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQ(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQ
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQ
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQ(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQ
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQ
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQ(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQ
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PopRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQ
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PopRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PopRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQ(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQ
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PopResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQ
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PopResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PopResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQ(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQ
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeekRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQ
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeekRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeekRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQ(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQ
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeekResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQ
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeekResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeekResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQ(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQ
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQ
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQ(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQ
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQ
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Created == nil {
				m.Created = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &Tag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQ(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQ
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQ
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &Metadata{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQ(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQ
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Queue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQ
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Queue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Queue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQ
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &Metadata{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			m.Store = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQ
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Store |= (Queue_Store(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQ(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQ
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQ(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQ
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQ
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQ
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthQ
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQ
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQ(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQ = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQ   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("q.proto", fileDescriptorQ) }
func init() { golang_proto.RegisterFile("q.proto", fileDescriptorQ) }

var fileDescriptorQ = []byte{
	// 864 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x4d, 0x6f, 0xe3, 0x44,
	0x18, 0xc7, 0x33, 0x71, 0xd3, 0x74, 0x9f, 0x94, 0xb6, 0xfb, 0x94, 0xee, 0xa6, 0xa6, 0xeb, 0x0d,
	0x03, 0x82, 0xa8, 0x62, 0x63, 0x28, 0x12, 0xa0, 0xdc, 0xba, 0x02, 0x01, 0x82, 0xb4, 0xa9, 0x37,
	0x2b, 0x04, 0x17, 0x34, 0xad, 0x07, 0x63, 0x35, 0x89, 0x9d, 0x7a, 0x52, 0x58, 0x21, 0x24, 0xc4,
	0x27, 0x58, 0x89, 0x2f, 0xc1, 0xc7, 0xe0, 0xc8, 0xb1, 0x12, 0x17, 0x6e, 0xd0, 0x2c, 0x07, 0x8e,
	0xfb, 0x11, 0x90, 0x67, 0xc6, 0x8e, 0x9d, 0x17, 0x92, 0x4a, 0x7b, 0x4a, 0xe6, 0x79, 0xf9, 0xff,
	0x9e, 0x19, 0xcf, 0xfc, 0xa1, 0x3c, 0x68, 0x84, 0x17, 0x81, 0x08, 0xb0, 0x24, 0x7f, 0xcc, 0x07,
	0x9e, 0x2f, 0xbe, 0x1d, 0x9e, 0x36, 0xce, 0x82, 0x9e, 0xed, 0x05, 0x5e, 0x60, 0xcb, 0xf0, 0xe9,
	0xf0, 0x1b, 0xb9, 0x92, 0x0b, 0xf9, 0x4f, 0x75, 0x99, 0x7b, 0x5e, 0x10, 0x78, 0x5d, 0x6e, 0xb3,
	0xd0, 0xb7, 0x59, 0xbf, 0x1f, 0x08, 0x26, 0xfc, 0xa0, 0x1f, 0xe9, 0xec, 0x7d, 0x9d, 0x4d, 0x35,
	0x84, 0xdf, 0xe3, 0x91, 0x60, 0xbd, 0x50, 0x15, 0xd0, 0x01, 0x6c, 0x1e, 0xf1, 0xef, 0x4e, 0x86,
	0x7c, 0xc8, 0x1d, 0x3e, 0x18, 0xf2, 0x48, 0x60, 0x1d, 0x4a, 0x91, 0x08, 0x2e, 0x78, 0x95, 0xd4,
	0x48, 0x7d, 0xe3, 0x00, 0x55, 0x65, 0x43, 0xd6, 0x34, 0x1e, 0xc5, 0x19, 0x47, 0x15, 0xe0, 0xcb,
	0x50, 0xea, 0xfa, 0x3d, 0x5f, 0x54, 0x8b, 0x35, 0x52, 0x37, 0x1c, 0xb5, 0x40, 0x0b, 0x56, 0x04,
	0xf3, 0xa2, 0xaa, 0x51, 0x33, 0xea, 0x95, 0x03, 0xd0, 0xed, 0x1d, 0xe6, 0x39, 0x32, 0x4e, 0xdf,
	0x83, 0xad, 0x31, 0x32, 0x0a, 0x83, 0x7e, 0xc4, 0x91, 0x42, 0x69, 0x10, 0x07, 0x24, 0xb3, 0x72,
	0xb0, 0x9e, 0x65, 0x3a, 0x2a, 0x45, 0xdf, 0x82, 0xcd, 0x8f, 0xb9, 0xc8, 0x8d, 0xba, 0x0b, 0x6b,
	0x32, 0xf7, 0xb5, 0xef, 0xca, 0xce, 0x5b, 0x4e, 0x59, 0xae, 0x3f, 0x75, 0x63, 0xca, 0xb8, 0xfa,
	0x06, 0x94, 0x6d, 0xb8, 0xfd, 0xb9, 0x1f, 0xa9, 0xc6, 0x48, 0x73, 0x68, 0x13, 0x30, 0x1b, 0xd4,
	0x72, 0xaf, 0xc3, 0xaa, 0xec, 0x89, 0xaa, 0x44, 0x6e, 0x35, 0xaf, 0xa7, 0x73, 0xd4, 0x06, 0xfc,
	0x90, 0x77, 0xb9, 0xe0, 0xcb, 0x4e, 0xbe, 0x03, 0xdb, 0xb9, 0x06, 0x45, 0xa3, 0x2d, 0xc0, 0x43,
	0xd7, 0x95, 0xb1, 0xf8, 0x2c, 0x17, 0xea, 0xe0, 0x1e, 0x18, 0x82, 0x79, 0xf2, 0xdb, 0xe4, 0x3f,
	0x43, 0x1c, 0x8e, 0x29, 0x39, 0x39, 0x4d, 0x69, 0xc3, 0x4e, 0x06, 0xfe, 0x22, 0x40, 0x55, 0xb8,
	0x33, 0xa9, 0xa8, 0x59, 0x27, 0x00, 0x87, 0xae, 0xbb, 0x04, 0xa0, 0x0e, 0xe5, 0x1e, 0x8f, 0x22,
	0xe6, 0x71, 0x0d, 0xd9, 0xd0, 0x90, 0x96, 0x8a, 0x3a, 0x49, 0x9a, 0xbe, 0x04, 0x15, 0x29, 0xa9,
	0x09, 0x6f, 0x02, 0xb4, 0x83, 0x70, 0x89, 0x33, 0x7f, 0x1f, 0x2a, 0xb2, 0x50, 0x7f, 0xd9, 0x0c,
	0x90, 0xfc, 0x3f, 0xb0, 0x0e, 0x95, 0x36, 0xe7, 0xe7, 0x4b, 0x20, 0x3e, 0x80, 0x75, 0x55, 0x79,
	0x63, 0xc6, 0x03, 0x30, 0x3a, 0xcc, 0xc3, 0x2d, 0x30, 0xce, 0xf9, 0x13, 0x2d, 0x1b, 0xff, 0x8d,
	0xdf, 0xdf, 0x25, 0xeb, 0x0e, 0xd5, 0xa9, 0xdc, 0x72, 0xd4, 0x82, 0x5e, 0xc2, 0x5a, 0x8b, 0x0b,
	0xe6, 0x32, 0xc1, 0x70, 0x03, 0x8a, 0xe9, 0x24, 0x45, 0xdf, 0xc5, 0x26, 0x94, 0xcf, 0x2e, 0x38,
	0x13, 0xdc, 0xd5, 0x27, 0x69, 0x36, 0x94, 0x43, 0x34, 0x12, 0x87, 0x68, 0x74, 0x12, 0x87, 0x78,
	0xb8, 0xf2, 0xf4, 0xaf, 0xfb, 0xc4, 0x49, 0x1a, 0x16, 0xbe, 0xeb, 0x4f, 0xa0, 0xac, 0x47, 0xc7,
	0xd7, 0x60, 0xa5, 0xc7, 0x05, 0xd3, 0x1b, 0xdb, 0x4c, 0x37, 0xa6, 0xa6, 0x72, 0x64, 0x12, 0xab,
	0x50, 0x0e, 0xd9, 0x93, 0x6e, 0xc0, 0xd4, 0x2c, 0xeb, 0x4e, 0xb2, 0xa4, 0xdf, 0x43, 0x49, 0x5e,
	0x96, 0xe5, 0x74, 0x52, 0xbf, 0x2a, 0x2e, 0xf0, 0x2b, 0x5a, 0x83, 0x92, 0x5c, 0x63, 0x05, 0xca,
	0x8f, 0x8f, 0x3e, 0x3b, 0x3a, 0xfe, 0xe2, 0x68, 0xab, 0x80, 0x00, 0xab, 0xad, 0x8f, 0x5a, 0xc7,
	0xce, 0x97, 0x5b, 0xe4, 0xe0, 0x6a, 0x15, 0xc8, 0x09, 0x3e, 0x06, 0x18, 0x3f, 0x77, 0xac, 0x6a,
	0xc1, 0x29, 0x5b, 0x30, 0x77, 0x67, 0x64, 0xf4, 0xcd, 0xc3, 0x9f, 0xff, 0xf8, 0xe7, 0x97, 0xe2,
	0x3a, 0x82, 0x7d, 0xf9, 0x8e, 0xad, 0x9c, 0x00, 0x1d, 0x58, 0x4b, 0x8c, 0x0f, 0xef, 0xe8, 0xd6,
	0x09, 0xf3, 0x35, 0xef, 0x4e, 0xc5, 0xb5, 0xe0, 0x8e, 0x14, 0xdc, 0xa4, 0x19, 0xc1, 0x26, 0xd9,
	0xc7, 0xaf, 0x60, 0x2d, 0xb1, 0xb9, 0x54, 0x73, 0xc2, 0x25, 0x53, 0xcd, 0x49, 0x3f, 0xa4, 0xf7,
	0xa4, 0xe6, 0x5d, 0xdc, 0x19, 0x6b, 0xda, 0x3f, 0x24, 0xf7, 0xf7, 0x47, 0x3c, 0x83, 0x4a, 0xe6,
	0xe5, 0x62, 0xb2, 0xdb, 0x69, 0x37, 0x33, 0xcd, 0x59, 0xa9, 0x3c, 0x64, 0x7f, 0x0e, 0xa4, 0x2b,
	0x5f, 0x6c, 0xe2, 0x0d, 0x29, 0x64, 0xda, 0xea, 0x52, 0xc8, 0x2c, 0xdb, 0x7a, 0x43, 0x42, 0x6a,
	0x74, 0x77, 0x26, 0xc4, 0x16, 0xcc, 0x6b, 0xc6, 0x66, 0x84, 0x43, 0xd8, 0xc8, 0x9b, 0x11, 0xee,
	0x4d, 0x8f, 0x9e, 0x61, 0xde, 0x9b, 0x93, 0xcd, 0x63, 0xf7, 0x17, 0x61, 0x3b, 0x60, 0x1c, 0xba,
	0x2e, 0xde, 0x1e, 0xef, 0x20, 0x01, 0x60, 0x36, 0x34, 0xb1, 0x99, 0xd9, 0x27, 0xd6, 0x4c, 0x7c,
	0x01, 0x8f, 0xc1, 0x68, 0x07, 0x61, 0xaa, 0x3a, 0x76, 0xba, 0x54, 0x35, 0xe3, 0x69, 0xf4, 0x55,
	0xa9, 0xfa, 0x0a, 0xce, 0x99, 0x35, 0x0c, 0x42, 0x7c, 0x04, 0x2b, 0xb1, 0x45, 0x61, 0xda, 0x3e,
	0x76, 0x36, 0x73, 0x3b, 0x17, 0xd3, 0x9a, 0x54, 0x6a, 0xee, 0xa1, 0x39, 0x47, 0x93, 0xf3, 0xf3,
	0x87, 0x6f, 0x5f, 0x5d, 0x5b, 0x85, 0x3f, 0xaf, 0xad, 0xc2, 0xf3, 0x6b, 0x8b, 0xfc, 0x34, 0xb2,
	0xc8, 0xaf, 0x23, 0x8b, 0xfc, 0x3e, 0xb2, 0xc8, 0xd5, 0xc8, 0x22, 0x7f, 0x8f, 0x2c, 0xf2, 0xef,
	0xc8, 0x2a, 0x3c, 0x1f, 0x59, 0xe4, 0xe9, 0x33, 0xab, 0xf0, 0xdb, 0x33, 0x8b, 0x9c, 0xae, 0x4a,
	0xd2, 0xbb, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x38, 0x66, 0xd5, 0xf2, 0x1a, 0x09, 0x00, 0x00,
}
